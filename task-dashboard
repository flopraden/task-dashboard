#! /usr/bin/env perl

use strict;
use warnings;

use feature 'say';

=head1 NAME

task-dashboard - A tmux-based dashboard for taskworrior

=head1 SYNOPSIS

	# just
	task-dashboard

=head1 DESCRIPTION

Using tmux panes and task's hook capability a dashboard is created within a
tmux session. If the hook gets triggered the views will be updated.

=cut


use Cwd qw(abs_path);
use File::Basename;
use Getopt::Long;
use JSON::PP qw(decode_json encode_json);


my %DEFAULT = (
    CONFIG_NAME => 'dashboard.json',
    
    TMUX_SESSION_NAME => 'task-dashboard',
    TMUX_WINDOW_NAME  => 'view',
    TMUX_WIDTH  => 273,
    TMUX_HEIGHT => 74,

    SAVE_PANE_IDS => 'dashboard.save-pids',
);

# Taken from the 'Write Commands' list
# (https://taskwarrior.org/download/task-2.5.0.ref.pdf)
my @WRITE_COMMANDS = qw(
	add annotate denotate append config delete done duplicate edit import log
	modify prepent start stop synchronize undo

	context
); # Also accept 'context' since views probably depend on current context

# Minimal interactive bash as a hack to keep panes open
my $MINIMAL_BASH = "'bash --rcfile <(echo \"unset MAIL PS1\")'";


my $config = get_config();

my $session = $config->{session} || $DEFAULT{TMUX_SESSION_NAME};
my $window  = $config->{window}  || $DEFAULT{TMUX_WINDOW_NAME};

# Called as task hook
if (@ARGV == 6) {
	my $task_context = get_task_context();

	# Only update view if executed task command is write command
	exit 0 unless grep { $_ eq $task_context->{command} } @WRITE_COMMANDS;

	# Exit if the dashboard is not running, yet
	dashboard_is_running($session) or exit 0;

	my $pane_commands = get_saved_pane_commands();
	foreach my $pid (keys %{$pane_commands}){
		my $command = $pane_commands->{$pid};
		$command =~ s/^\*//;
		# Do not execute again if `!`-marker is present
		next if $command =~ /^!/;
		$command = sanitize($command);
		tmux('send-keys', '-t', "$session:$window.$pid", "clear; $command", 'Enter');
	}

# Called from terminal
} else {
	# Exit if the dashboard is already running
	if (dashboard_is_running($session)) {
		say "Task dashboard already running.";
		tmux('attach', '-t', $session) if $config->{'auto-attach'};
		exit 0;
	}

	my $width  = $config->{width}  || $DEFAULT{TMUX_WIDTH};
	my $height = $config->{height} || $DEFAULT{TMUX_HEIGHT};

	# Check hook link before creating tmux session
	ensure_hook_link();

	# Setup layout
	my $main_pane_id = tmux_id('new', '-s', $session, '-n', $window, '-d',  '-x', $width, '-y', $height, $MINIMAL_BASH);
	# Keep status position
	tmux('set', '-t', "$session:$window", 'status', "on");
	# Make it on top
	tmux('set', '-t', "$session", 'status-position', 'top');
	# source config file for tmux if needed
	if (exists($config->{tmuxrc})){
	    my $tmuxrc="";
	    if(substr( $config->{tmuxrc}, 0, 1 ) eq '/') {
		$tmuxrc = $config->{tmuxrc};
	    }
	    else{
		$tmuxrc = task_config('rc.data.location').'/'.$config->{tmuxrc};
	    }
	    tmux('source-file', $tmuxrc);
	}

	my %pane_commands = parse($config->{layout}, $main_pane_id);;

	# Executing commands in corresponding pane id
	foreach my $pid (keys %pane_commands){
		my $command = $pane_commands{$pid};
		# Select pane if `*`-marker is present
		tmux('select-pane', '-t', "$session:$window.$pid") if $command =~ s/^\*//;
		$command =~ s/^!//;
		$command = sanitize($command);
		tmux('send-keys', '-t', "$session:$window.$pid", "clear; $command", 'Enter');
	}
	save_pane_commands(\%pane_commands);
	tmux('attach', '-t', $session) if $config->{'auto-attach'};
}


sub get_config {
	my $config_file = get_config_file();

	die "Cannot find dashboard configuration!\n" unless -f $config_file;

	open my $fh, '<', $config_file or die $!;
	local $/;
	my $config = decode_json(<$fh>);
	close $fh or warn $!;

	return $config;
}

sub get_saved_pane_commands{
    my $filepath = task_config('rc.data.location').'/'.$DEFAULT{SAVE_PANE_IDS};
    die "Cannot find dashboard pane ids config!\n" unless -f $filepath;
    open my $fh, '<', $filepath or die $!;
    local $/;
    my $pane_ids = decode_json(<$fh>);
    close $fh or warn $!;
    
    return $pane_ids;
}
    
sub save_pane_commands{
    my $pane_ids = shift;
    my $filepath = task_config('rc.data.location').'/'.$DEFAULT{SAVE_PANE_IDS};
    open(my $fh, '>:encoding(UTF-8)', $filepath) or die $!;
    my $encoded=encode_json($pane_ids);
    print $fh $encoded;
    close $fh;
}

sub get_config_file {
	GetOptions('c|config=s' => \my $config);

	unless (defined $config) {
		$config = task_config('rc.data.location').'/'.$DEFAULT{CONFIG_NAME};
	}

	return $config;
}

sub get_task_context {
	my $context = {};
	my $idx = 0;
	for (qw(api args command rc data version)) {
		$context->{$_} = $ARGV[$idx++] =~ s/^$_://r or return;
	}
	return $context;
}

sub parse {
    
    my $layer = shift;
    my $pivot_id = shift;
    
    my ($layout, $contents) = each %{$layer};
    my ($split, @parts) = split /:/, $layout;
    my ($pivot) = grep { $parts[$_] eq '~' } 0 .. $#parts;
    my @pane_ids = ();
    my %ret = ();
    die if @parts != @{$contents};
    
    
    # TODO Move $session and $window variable into this subroutine instead of
    #      using their global scope
    for my $idx (0 .. $pivot-1) {
	$pane_ids[$idx]=tmux_id('split-window', '-t', "$session:$window.$pivot_id", "-$split", "-$parts[$idx]", '-b', $MINIMAL_BASH);
    }
    $pane_ids[$pivot] = $pivot_id;
    for my $idx (reverse $pivot+1 .. $#parts) {
	$pane_ids[$idx]=tmux_id('split-window', '-t', "$session:$window.$pivot_id", "-$split", "-$parts[$idx]", $MINIMAL_BASH);
    }

    my @commands = @{$contents};

    # Expand commands recursively
    for my $idx (0 .. $#commands) {
	my $command = $commands[$idx];
	if (ref $command eq 'HASH') {
	    my %sub_ret= parse($command, $pane_ids[$idx]);
	    %ret = (%ret, %sub_ret)
	}
	else{
	    $ret{$pane_ids[$idx]}=$command
	}
    }

    return %ret;
}

sub dashboard_is_running {
	my $session = shift;
	return not system "tmux has-session -t '$session' > /dev/null 2>&1";
}

sub ensure_hook_link {
	my $target = abs_path($0);
	my $symlink = task_config('rc.data.location') . '/hooks/on-exit_dashboard';
	if (-e $symlink) {
		die "Hook symlink points to another location!\n" if abs_path($symlink) ne $target;
	} else {
		symlink $target, $symlink;
	}
}

sub task_config {
	chomp (my $output = `task rc.verbose:nothing rc.hooks:off _get @_`);
	$output =~ s/^~/$ENV{HOME}/; # Tilde expansion
	return $output;
}

sub tmux {
	system 'tmux', @_;
}

sub tmux_id {
    my $tmux_cmd = shift;
    my $cmdline = "tmux" . " " . $tmux_cmd . ' -P -F "#{pane_id}" ' . join(" ", @_);
    my $ret = `$cmdline`;
    $ret =~ /^(%[0-9]+)$/;
    return $1;
}
	
sub sanitize {
	my $command = shift;

	$command =~ s/^\s*\Ktask\b/task rc.verbose:label rc.hooks:off/;

	return $command;
}

